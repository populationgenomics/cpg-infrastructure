[tool.black]
line-length = 88
skip-string-normalization = true

[tool.isort]
py_version = 311
profile = "black"
line_length = 88
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', "HAIL", 'CPG', 'FIRSTPARTY', 'LOCALFOLDER']
known_hail = [
    "hail",
    "hailctl",
]
known_cpg = [
    "analysis-runner",
    "cpg_utils",
    "cpg_infra",
    "cpg_workflows",
    "metamist",
]

[tool.ruff]
line-length = 88

# ignore pydocstyle, flake8-boolean-trap (FBT)
select = ["A", "B", "C",  "E", "F", "G", "I", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN201",  # Missing return type annotation for public function
    "E501",    # Line length too long
    "E731",    # Do not assign a lambda expression, use a def
    "E741",    # Ambiguous variable name
    "G004",    # Logging statement uses f-string
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLW0603", # Using the global statement to update `<VAR>` is discouraged
    "PT018",   # Assertion should be broken down into multiple parts
    "Q000",    # Single quotes found but double quotes preferred
    "S101",    # Use of assert detected
    "PT009",   # Use a regular `assert` instead of unittest-style `assertDictEqual`
    "PT027",   # Use `pytest.raises` instead of unittest-style `assertRaises`
    "I001",    # Import block is un-sorted or un-formatted (using isort instead)
]
